// http://bigwww.epfl.ch/demo/edf/index.html
// http://bigwww.epfl.ch/demo/edf/EDF-demo.txt
// http://imagej.1557.x6.nabble.com/Extended-Depth-of-Field-EDF-plugin-with-batch-mode-td3700708.html
//./Fiji.app/Contents/MacOS/ImageJ-macosx --headless --console -macro ./RunBatch.txt 'folder=test_macro parameters=a.properties output=./test_output'

arg = getArgument()
input_folder = '/Users/kristian/Desktop/todo/DEMO/05'

//run("Image Sequence...", "open=&input_folder sort");
run("Image Sequence...", "open=/Users/kristian/Desktop/todo/DEMO/05 sort");
run("Linear Stack Alignment with SIFT", "initial_gaussian_blur=1.60 steps_per_scale_octave=3 minimum_image_size=64 maximum_image_size=1024 feature_descriptor_size=4 feature_descriptor_orientation_bins=8 closest/next_closest_ratio=0.92 maximal_alignment_error=25 inlier_ratio=0.05 expected_transformation=Rigid interpolate");
//run("Expert mode...");
//run("Easy mode...");
run("Easy mode...", "quality=0 topology=1 show-topology=off show-view=off");
//run("EDF Easy ", "quality='0' topology='1' show-topology='off' show-view='off'");
initTime = getTime(); 
oldTime = initTime; 
while (!isOpen("Output")) { 
	elapsedTime = getTime() - initTime; 
	newTime = getTime() - oldTime;
	// print something every 10 seconds so that we will know it is still alive 
	if (newTime > 10000) { 
		oldTime = getTime(); 
		newTime = 0; 
		print(elapsedTime/1000, " seconds elapsed");
		list = getList("image.titles");
  if (list.length==0)
     print("No image windows are open");
  else {
     print("Image windows:");
     for (i=0; i<list.length; i++)
        print("   "+list[i]);
  }
 print("");

 list = getList("window.titles");
  if (list.length==0)
     print("No non-image windows are open");
  else {
     print("Non-image windows:");
     for (i=0; i<list.length; i++)
        print("   "+list[i]);
  }
  print("");
	}
}
wait(1000); // let's really make sure that window is open
selectWindow("Output");
saveAs("Tiff", "/Users/kristian/Desktop/todo/DEMO/05.tif");

print("Done.")
eval("script", "System.exit(0);");


//
// Description of the arguments
//
// argument quality: Speed/Quality trade-off.
//		0 for fast
//		1 for intermediate speed
//		2 for medium quality / medium speed
//		3 for intermediate quality
//		4 for high quality 
//
// argument topology: Topology smoothness
//		0 for no smoothing of the topology 
//		1 for weak smoothing 
//		2 for medium smoothing
//		3 for strong smoothing 
//		4 for very strong smoothing
//
// argument show-topology: Show the topology map
//		on
//		off
//
// argument show-view: Show the 3D view  
//		on
//		off

